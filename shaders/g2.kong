const kore_g2_constants: {
	projection: float4x4;
};

struct kore_g2_colored_vertex_in {
	pos: float3;
	col: float4;
}

struct kore_g2_colored_vertex_out {
	pos: float4;
	col: float4;
}

fun kore_g2_colored_vertex(input: kore_g2_colored_vertex_in): kore_g2_colored_vertex_out {
	var output: kore_g2_colored_vertex_out;

	output.pos = kore_g2_constants.projection * float4(input.pos, 1.0);
	output.pos.z = 0.5;
	output.pos.w = 1.0;
	output.col = input.col;

	return output;
}

fun kore_g2_colored_fragment(input: kore_g2_colored_vertex_out): float4 {
	return input.col;
}

#[pipe]
struct kore_g2_colored_pipeline {
	vertex = kore_g2_colored_vertex;
	fragment = kore_g2_colored_fragment;
	blend_source = BLEND_ONE;
	blend_destination = BLEND_INV_SOURCE_ALPHA;
	alpha_blend_source = BLEND_ONE;
	alpha_blend_destination = BLEND_INV_SOURCE_ALPHA;
}

struct kore_g2_image_vertex_in {
	pos: float3;
	tex: float2;
	col: float4;
}

struct kore_g2_image_vertex_out {
	pos: float4;
	tex: float2;
	col: float4;
}

fun kore_g2_image_vertex(input: kore_g2_image_vertex_in): kore_g2_image_vertex_out {
	var output: kore_g2_image_vertex_out;

	output.pos = kore_g2_constants.projection * float4(input.pos, 1.0);
	output.pos.z = 0.5;
	output.pos.w = 1.0;
	output.tex = input.tex;
	output.col = input.col;

	return output;
}

const kore_g2_texture: tex2d;
const kore_g2_sampler: sampler;

fun kore_g2_image_fragment(input: kore_g2_image_vertex_out): float4 {
	var texcolor: float4 = sample(kore_g2_texture, kore_g2_sampler, input.tex) * input.col;
	texcolor.rgb *= input.col.a;
	return texcolor;
}

#[pipe]
struct kore_g2_image_pipeline {
	vertex = kore_g2_image_vertex;
	fragment = kore_g2_image_fragment;
	blend_source = BLEND_ONE;
	blend_destination = BLEND_INV_SOURCE_ALPHA;
	alpha_blend_source = BLEND_ONE;
	alpha_blend_destination = BLEND_INV_SOURCE_ALPHA;
}

/*
#version 450

in vec3 vertexPosition;
in vec2 vertexUV;
in vec4 vertexColor;
uniform mat4 projectionMatrix;
out vec2 texCoord;
out vec4 fragmentColor;

void text_vertex() {
	gl_Position = projectionMatrix * vec4(vertexPosition, 1.0);
	texCoord = vertexUV;
	fragmentColor = vertexColor;
}

#version 450

uniform sampler2D tex;
in vec2 texCoord;
in vec4 fragmentColor;
out vec4 FragColor;

void text_fragment() {
	FragColor = vec4(fragmentColor.rgb, texture(tex, texCoord).r * fragmentColor.a);
}
*/
